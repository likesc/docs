// Generated by Haxe 4.3.1
(function (console, $global) { "use strict";
var Main = function() { };
Main.mkitems = function(body,side) {
	var stack = [];
	var last = null;
	var frags = document.createDocumentFragment();
	var headers = body.querySelectorAll("h2, h3, h4");
	var _g = 0;
	while(_g < headers.length) {
		var head = headers[_g++];
		var desc = head.innerText;
		if(desc.charCodeAt(0) == 33) {
			head.innerText = desc.substring(1);
			continue;
		}
		var rank = head.nodeName.charCodeAt(1) - 48;
		var item = __h("li",null,__h("a",{ href : "#" + head.id},desc));
		while(item != last) {
			var len = stack.length;
			if(len == 0 || last == null) {
				frags.appendChild(item);
				stack.push(rank);
				last = item;
				continue;
			}
			var prev = stack[len - 1];
			if(rank == prev) {
				var parent = last.parentElement == null ? frags : last.parentElement;
				parent.appendChild(item);
			} else if(rank > prev) {
				var ul = document.createElement("ul");
				ul.appendChild(item);
				last.appendChild(ul);
				stack.push(rank);
			} else {
				stack.pop();
				last = last.parentElement;
				if(last != null) {
					last = last.parentElement;
				}
				continue;
			}
			last = item;
		}
	}
	side.appendChild(frags);
	return headers;
};
Main.scrollspy = function(hfixed,side,nodes) {
	if(side.children.length == 0) {
		document.querySelector("#content").style.marginLeft = "0";
		return;
	}
	if(dt.getCss(side,"position") != "fixed") {
		return;
	}
	var offsets = [];
	var prev = 0;
	var _g = 0;
	while(_g < nodes.length) {
		var curr = nodes[_g++].offsetTop - hfixed;
		var midd = curr + prev >> 1;
		offsets.push(midd + (curr - midd >> 1));
		prev = curr;
	}
	if(offsets.length == 0) {
		return;
	}
	var onscroll = function() {
		var actives = side.querySelectorAll("." + "active");
		var _g = 0;
		while(_g < actives.length) actives[_g++].className = "";
		var top = document.documentElement.scrollTop;
		var i = 0;
		var j = offsets.length - 1;
		while(i <= j) {
			var mid = i + j >> 1;
			if(top >= offsets[mid]) {
				if(mid + 1 <= j && top >= offsets[mid + 1]) {
					i = mid + 1;
					continue;
				}
				i = mid;
				break;
			} else {
				j = mid - 1;
			}
		}
		var link = Main.dsearch(side,i,[0]);
		if(link == null) {
			return;
		}
		link.className = "active";
		var parent = link.parentElement;
		while(parent != null) {
			var ul = parent.parentElement;
			if(ul == null || ul.nodeName.toUpperCase() != "UL") {
				break;
			}
			parent = ul.parentElement;
			parent.querySelector("a").className = "active";
		}
	};
	window.onscroll = onscroll;
	onscroll();
};
Main.dsearch = function(elem,pos,acc) {
	var _g = 0;
	var _g1 = elem.children;
	while(_g < _g1.length) {
		var li = _g1[_g];
		++_g;
		if(pos == acc[0]) {
			return li.firstChild;
		}
		acc[0]++;
		if(li.children.length == 1) {
			continue;
		}
		var link = Main.dsearch(li.children[1],pos,acc);
		if(link != null) {
			return link;
		}
	}
	return null;
};
Main.main = function() {
	var body = document.querySelector(".markdown-body");
	var side = document.querySelector("#items");
	if(body == null || side == null) {
		return;
	}
	Main.scrollspy(2,side,Main.mkitems(body,side));
};
var dt = function() { };
dt.getCss = function(dom,name) {
	if(dom.currentStyle) {
		return dom.currentStyle[name];
	} else {
		return window.getComputedStyle(dom,null).getPropertyValue(name);
	}
};
function __h(name,attr,sub) {
	var dom = document.createElement(name);
	if(attr != null) {
		for(var k in attr) dom.setAttribute(k, attr[k]);
	}
	__hrec(dom,sub,false);
	return dom;
}
function __hrec(box,sub,loop) {
	if(sub == null) {
		return;
	}
	if(((sub) instanceof Array)) {
		var i = 0;
		var len = sub.length;
		while(i < len) {
			__hrec(box,sub[i],true);
			++i;
		}
	} else if(typeof(sub) == "object") {
		box.appendChild(sub);
	} else if(loop) {
		box.appendChild(document.createTextNode(sub));
	} else {
		box.innerText = sub;
	}
}
Main.main();
})(typeof console != "undefined" ? console : {log:function(){}}, {});
